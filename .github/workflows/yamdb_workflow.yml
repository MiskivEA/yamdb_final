name: Django-app

on:
  push:
    branches: [ master ]

jobs:
  Tests:
    runs-on: ubuntu-latest
    steps:
    - name: clone repo
      uses: actions/checkout@v2

    - name: create python virtual env
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install -r api_yamdb/requirements.txt    

    - name: run test flake8 =)
      run: |
        python -m flake8

    - name: run pytest
      run: |
        pytest

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    #needs: tests
    steps:
      - name: Check out the repo
        # Проверка доступности репозитория Docker Hub для workflow
        uses: actions/checkout@v2


      - name: Set up Docker Buildx
        working-directory: api_yamdb
        # Вызов сборщика контейнеров docker
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker
        # Запуск скрипта авторизации на Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Push to Docker Hub
        # Пуш образа в Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: miskivea/yamdb_final:latest
        

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            ls
            sudo docker-compose stop
            sudo docker-compose rm web            
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo docker-compose up -d
            

  send_message_tests:
    runs-on: ubuntu-latest
    needs: Tests
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.MY_TELEGRAM_ID }}
          token: ${{ secrets.ENID_BOT_TOKEN }}
          message: Тесты успешно пройдены!

  send_message_deploy:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.MY_TELEGRAM_ID }}
          token: ${{ secrets.ENID_BOT_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!

  send_message_push_to_dockerhub:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.MY_TELEGRAM_ID }}
          token: ${{ secrets.ENID_BOT_TOKEN }}
          message: Образ успешно загружен на докерхаб!


